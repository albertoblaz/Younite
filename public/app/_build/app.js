// Generated by CoffeeScript 1.6.3
(function() {
  var Connector, Delegate, Storage, signupRight, signupWrong, _ref, _ref1, _ref10, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8, _ref9,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  App.Messages = {
    UserCreated: "User created successfully!",
    SignupFailed: "A new user can not be created",
    AuthenticationFailed: "Username or password is incorrect",
    InternetRequired: "An Internet connection is required",
    LoginFieldsRequired: "Please, fill all the fields to login",
    SignupFieldsRequired: "Please, fill all the fields to create a new account",
    TooMuchUsersStorage: "Too much users on storage"
  };

  App.Utils = {};

  App.Utils.showSuccess = function(message, callback) {
    return Lungo.Notification.success("Success", message, "check", 2, typeof callback === "function" ? callback() : void 0);
  };

  App.Utils.showError = function(message) {
    return Lungo.Notification.error("Error", message, "cancel", 2);
  };

  App.Utils.fail = function(xhr) {
    var json, k, v, _ref;
    console.log("fail", xhr);
    json = JSON.parse(xhr.responseText);
    if (typeof json === "object") {
      if (json.errors) {
        _ref = json.errors;
        for (k in _ref) {
          v = _ref[k];
          App.Utils.showError("" + k + " " + v);
        }
      }
      if (json.message) {
        return App.Utils.showError(json.message);
      }
    } else if (typeof json === "string") {
      return App.Utils.showError("" + json);
    }
  };

  App.Utils.online = function() {
    return true;
  };

  Connector = (function() {
    function Connector() {}

    Connector.prototype.URIS = {
      login: "/users/login",
      logout: "/users/logout",
      signup: "/users"
    };

    Connector.prototype.login = function(user) {
      return this.auth(this.URIS.login, user);
    };

    Connector.prototype.logout = function(user) {
      return this.auth(this.URIS.logout);
    };

    Connector.prototype.signup = function(user) {
      return this.auth(this.URIS.signup, user);
    };

    Connector.prototype.auth = function(uri, data) {
      var p;
      console.log(uri, data);
      $.ajaxSetup({
        "contentType": "application/json"
      });
      return p = $.post(uri, JSON.stringify(data));
    };

    return Connector;

  })();

  App.Connector = new Connector;

  Storage = (function() {
    Storage.prototype.KEYS = {
      users: 'users'
    };

    function Storage(users) {
      this.users = users != null ? users : [];
      this.retrieve();
    }

    Storage.prototype.retrieve = function() {
      var data, json;
      json = window.localStorage.getItem(this.KEYS.users);
      if (json) {
        data = JSON.parse(json);
      }
      if (data) {
        this.users = data;
      }
      return this;
    };

    Storage.prototype.login = function(user, success, failure) {
      if (this.lookup(user)) {
        return typeof success === "function" ? success(user) : void 0;
      } else {
        return typeof failure === "function" ? failure(user) : void 0;
      }
    };

    Storage.prototype.signup = function(user) {
      var json;
      if (!this.lookup(user)) {
        this.users.push(user);
        json = JSON.stringify(this.users);
        return window.localStorage.setItem(this.KEYS.users, json);
      }
    };

    Storage.prototype.lookup = function(user) {
      var arr;
      arr = this.users.filter(function(u) {
        return user.username === u.username && user.password === u.password;
      });
      if (arr.length > 1) {
        throw App.Exceptions.TooMuchUsersStorage;
      }
      return arr[0];
    };

    return Storage;

  })();

  App.Storage = new Storage;

  App.Activity = (function(_super) {
    __extends(Activity, _super);

    function Activity() {
      _ref = Activity.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    Activity.fields("id", "timestamp", "agent", "from", "type", "action");

    Activity.prototype.validate = function() {};

    return Activity;

  })(Monocle.Model);

  App.Site = (function(_super) {
    __extends(Site, _super);

    function Site() {
      _ref1 = Site.__super__.constructor.apply(this, arguments);
      return _ref1;
    }

    Site.fields("id", "name", "description", "city", "address", "picture", "style", "users", "events", "owner", "loved", "recommended");

    Site.prototype.validate = function() {
      if (!this.id) {
        "id is required";
      }
      if (!this.name) {
        return "name is required";
      }
    };

    Site.prototype.love = function(user) {
      this.updateAttributes({
        loved: !this.loved
      });
      return this;
    };

    return Site;

  })(Monocle.Model);

  App.User = (function(_super) {
    __extends(User, _super);

    function User() {
      _ref2 = User.__super__.constructor.apply(this, arguments);
      return _ref2;
    }

    User.fields("id", "username", "password", "displayName", "picture", "gender", "city", "public", "likes", "birthday", "sites", "friends", "events", "bio", "role", "timeline", "activity", "music", "ambient", "maxprice", "age");

    User.prototype.validate = function() {
      if (!this.id) {
        return "id is required";
      }
    };

    User.prototype["delete"] = function() {
      App.Storage["delete"]();
      App.Connector["delete"]();
      return App.Delegate.reboot();
    };

    return User;

  })(Monocle.Model);

  App.SiteView = (function(_super) {
    __extends(SiteView, _super);

    SiteView.prototype.template_url = "app/templates/SiteView.mustache";

    SiteView.prototype.events = {
      "tap .button": "onLove",
      "tap li": "onTap"
    };

    function SiteView() {
      this.removeSiteView = __bind(this.removeSiteView, this);
      SiteView.__super__.constructor.apply(this, arguments);
      App.Site.bind("removeSiteView", this.removeSiteView);
    }

    SiteView.prototype.onTap = function(event) {
      console.log("onTap");
      return Monocle.Route.navigate("/sites/" + this.model.id);
    };

    SiteView.prototype.onLove = function(event) {
      event.preventDefault();
      event.stopPropagation();
      this.model.love();
      return this.refresh();
    };

    SiteView.prototype.removeSiteView = function(model) {
      var loved, lovedContainer, wrongPlace;
      loved = model.attributes().loved;
      lovedContainer = this.container.parent()[0].id === "sitesfav";
      wrongPlace = loved ^ lovedContainer;
      if (wrongPlace && this.model.equal(model)) {
        return this.el.remove();
      }
    };

    return SiteView;

  })(Monocle.View);

  App.NavController = (function(_super) {
    __extends(NavController, _super);

    function NavController() {
      _ref3 = NavController.__super__.constructor.apply(this, arguments);
      return _ref3;
    }

    NavController.prototype.events = {
      "tap .profile": "onProfile"
    };

    NavController.prototype.onProfile = function(event) {
      return console.log("onProfile");
    };

    return NavController;

  })(Monocle.Controller);

  App.ActivityController = (function(_super) {
    __extends(ActivityController, _super);

    function ActivityController() {
      _ref4 = ActivityController.__super__.constructor.apply(this, arguments);
      return _ref4;
    }

    ActivityController.prototype.elements = {
      ".btn-filter": "buttons",
      "#activity-list": "list"
    };

    ActivityController.prototype.events = {
      "tap .btn-filter": "onTap"
    };

    ActivityController.prototype.onTap = function(event) {
      var action, b, elems, id, target;
      target = event.currentTarget;
      b = $$(target);
      b.toggleClass('secondary');
      id = target.id.slice(4);
      switch (id) {
        case "party":
          b.toggleClass('cancel');
          break;
        case "site":
          b.toggleClass('yellow');
          break;
        case "friend":
          b.toggleClass('accept');
      }
      action = b.hasClass('secondary') ? 'hide' : 'show';
      elems = this.list.find("." + id);
      return elems[action]();
    };

    return ActivityController;

  })(Monocle.Controller);

  App.PartiesController = (function(_super) {
    __extends(PartiesController, _super);

    function PartiesController() {
      _ref5 = PartiesController.__super__.constructor.apply(this, arguments);
      return _ref5;
    }

    return PartiesController;

  })(Monocle.Controller);

  App.SitesController = (function(_super) {
    __extends(SitesController, _super);

    SitesController.prototype.elements = {
      "#sitesfav ul": "fav",
      "#sitesrec ul": "rec"
    };

    SitesController.prototype.events = {
      "click a[data-action=search]": "onSearch",
      "load #sites": "renderViews"
    };

    function SitesController() {
      this.bindSiteError = __bind(this.bindSiteError, this);
      this.bindSiteDelete = __bind(this.bindSiteDelete, this);
      this.renderSite = __bind(this.renderSite, this);
      this.bindChange = __bind(this.bindChange, this);
      this.bindCreate = __bind(this.bindCreate, this);
      var p,
        _this = this;
      SitesController.__super__.constructor.apply(this, arguments);
      this.pendingSites = [];
      App.Site.bind("create", this.bindCreate);
      App.Site.bind("error", this.bindSiteError);
      App.Site.bind("delete", this.bindSiteDelete);
      p = $.getJSON("/sites/");
      p.done(function(sites) {
        var s, _i, _len;
        console.log(sites);
        for (_i = 0, _len = sites.length; _i < _len; _i++) {
          s = sites[_i];
          App.Site.create(s);
        }
        return App.Site.bind("change", _this.renderSite);
      });
      p.fail(App.Utils.fail);
    }

    SitesController.prototype.onSearch = function(event) {
      return console.log("Searching");
    };

    SitesController.prototype.bindCreate = function(site) {
      var view;
      console.log("You've created " + site.name + "!");
      view = new App.SiteView({
        model: site
      });
      if (site.loved) {
        view.container = this.fav;
        return view.append(site);
      } else if (site.recommended) {
        view.container = this.rec;
        return view.append(site);
      }
    };

    SitesController.prototype.bindChange = function(site) {
      var view;
      console.log("You've changed " + site.name + "!");
      view = new App.SiteView({
        model: site
      });
      if (site.loved) {
        view.container = this.fav;
      } else if (site.recommended) {
        view.container = this.rec;
      }
      return this.pendingSites.push(view);
    };

    SitesController.prototype.renderViews = function(event) {
      var v, _i, _len, _ref6;
      _ref6 = this.pendingSites;
      for (_i = 0, _len = _ref6.length; _i < _len; _i++) {
        v = _ref6[_i];
        v.model.trigger("removeSiteView");
        v.append(v.model);
      }
      return this.pendingSites = [];
    };

    SitesController.prototype.renderSite = function(site) {
      var view;
      console.log("You've rendered " + site.name + "!");
      view = new App.SiteView({
        model: site
      });
      if (site.loved) {
        view.container = this.fav;
      } else if (site.recommended) {
        view.container = this.rec;
      }
      return this.pendingSites.push(view);
    };

    SitesController.prototype.bindSiteDelete = function(site) {
      return console.log("You've deleted " + site.name + "!");
    };

    SitesController.prototype.bindSiteError = function(site) {
      return console.log("Site Error spotted, " + site + "!");
    };

    SitesController.prototype.viewSiteProfile = function(params) {
      console.log("View the profile of the site: " + params.id);
      return Lungo.Router.section("#site");
    };

    return SitesController;

  })(Monocle.Controller);

  App.MapController = (function(_super) {
    __extends(MapController, _super);

    function MapController() {
      _ref6 = MapController.__super__.constructor.apply(this, arguments);
      return _ref6;
    }

    MapController.prototype.notified = false;

    MapController.prototype.events = {
      "load #map": "onLoad"
    };

    MapController.prototype.onLoad = function(event) {
      if (!this.notified) {
        return Lungo.Notification.confirm({
          icon: "pushpin",
          title: "¿Find the nearest sites?",
          description: "Map lets you know what are the closest places at your current position. Do you want to find new sites when entering in this window? (You could change this on settings)",
          accept: {
            icon: 'check',
            label: 'Accept and Find',
            callback: this.onAccept
          },
          cancel: {
            icon: "multiply",
            label: "Don't allow",
            callback: this.onCancel
          }
        });
      }
    };

    MapController.prototype.onAccept = function() {
      var notif;
      Lungo.Notification.hide();
      notif = function() {
        Lungo.Notification.show();
        return setTimeout(function() {
          return Lungo.Notification.hide();
        }, 3000);
      };
      setTimeout(notif, 300);
      return this.notified = true;
    };

    MapController.prototype.onCancel = function() {
      return this.notified = true;
    };

    return MapController;

  })(Monocle.Controller);

  App.UserController = (function(_super) {
    __extends(UserController, _super);

    UserController.prototype.elements = {
      "#displayName": "displayName",
      "#picture": "picture",
      "#music": "music",
      "#ambient": "ambient",
      "#age": "age",
      "#maxprice": "maxprice",
      "#bio": "bio",
      "#timeline": "timeline"
    };

    UserController.prototype.events = {
      "load #profile": "onLoad",
      "tap .taste": "onTapTaste"
    };

    function UserController() {
      UserController.__super__.constructor.apply(this, arguments);
      this.downloadMe();
    }

    UserController.prototype.download = function(id) {};

    UserController.prototype.downloadMe = function() {
      var p,
        _this = this;
      p = $.get("/users/me");
      p.done(function(data) {
        var user;
        console.log(data);
        user = new App.User(data);
        user.save();
        _this.render(user.attributes());
        return App.Me = user;
      });
      return p.fail(App.Utils.fail);
    };

    UserController.prototype.onLoad = function(event) {
      return console.log("onLoad!!", event);
    };

    UserController.prototype.onTapTaste = function(event) {
      return console.log(event);
    };

    UserController.prototype.render = function(user) {
      this.displayName.text(user.displayName);
      this.music.text(user.music);
      this.ambient.text(user.ambient);
      this.age.text(user.birthday);
      this.maxprice.text(user.maxprice);
      return this.bio.text(user.bio);
    };

    return UserController;

  })(Monocle.Controller);

  App.FriendsController = (function(_super) {
    __extends(FriendsController, _super);

    function FriendsController() {
      _ref7 = FriendsController.__super__.constructor.apply(this, arguments);
      return _ref7;
    }

    return FriendsController;

  })(Monocle.Controller);

  App.SettingsController = (function(_super) {
    __extends(SettingsController, _super);

    function SettingsController() {
      _ref8 = SettingsController.__super__.constructor.apply(this, arguments);
      return _ref8;
    }

    return SettingsController;

  })(Monocle.Controller);

  App.HelpController = (function(_super) {
    __extends(HelpController, _super);

    function HelpController() {
      _ref9 = HelpController.__super__.constructor.apply(this, arguments);
      return _ref9;
    }

    HelpController.prototype.elements = {
      "#query": "query"
    };

    HelpController.prototype.events = {
      "tap #send-question": "onTap"
    };

    HelpController.prototype.onTap = function() {
      var text;
      text = this.query.val();
      if (text) {
        return this.sendQuestion(text);
      }
    };

    HelpController.prototype.sendQuestion = function(text) {
      var res;
      res = false;
      console.log(text);
      if (res) {
        return Lungo.Notification.success("Question sent!", "You will receive a response in the activity view", "check", 3, function() {
          return {};
        });
      }
    };

    return HelpController;

  })(Monocle.Controller);

  App.PartyController = (function(_super) {
    __extends(PartyController, _super);

    function PartyController() {
      _ref10 = PartyController.__super__.constructor.apply(this, arguments);
      return _ref10;
    }

    return PartyController;

  })(Monocle.Controller);

  App.SiteController = (function(_super) {
    __extends(SiteController, _super);

    SiteController.prototype.elements = {
      "#name": "name",
      "#picture": "picture",
      "#music": "music",
      "#ambient": "ambient",
      "#age": "age",
      "#maxprice": "maxprice",
      "#description": "description",
      "#comments": "comments",
      "#love": "love"
    };

    SiteController.prototype.events = {
      "tap #love": "onLove"
    };

    SiteController.prototype.currentSite = null;

    function SiteController() {
      SiteController.__super__.constructor.apply(this, arguments);
      this.routes({
        "/sites/:id": this.viewSiteProfile
      });
      Monocle.Route.listen();
    }

    SiteController.prototype.viewSiteProfile = function(params) {
      var site;
      console.log("View the profile of the site: " + params.id);
      site = App.Site.findBy("id", params.id);
      this.currentSite = site;
      this.render(site);
      return Lungo.Router.section("#site");
    };

    SiteController.prototype.render = function(site) {
      this.name.text(site.name);
      this.picture[0].src = site.picture;
      return this.renderLove();
    };

    SiteController.prototype.renderLove = function() {
      var icon, label;
      label = this.love.find("abbr");
      icon = this.love.find(".icon");
      if (this.currentSite.attributes().loved) {
        label.text("Loving");
        return icon.removeClass("heart-full").addClass("heart");
      } else {
        label.text("Love?");
        return icon.removeClass("heart").addClass("heart-full");
      }
    };

    SiteController.prototype.onLove = function() {
      this.currentSite.love();
      return this.renderLove();
    };

    SiteController.prototype.download = function(id) {
      var data;
      data = App.Connector.sites.get(id);
      return App.Site.create(data);
    };

    return SiteController;

  })(Monocle.Controller);

  App.LoginDirectController = (function(_super) {
    __extends(LoginDirectController, _super);

    function LoginDirectController() {
      var p, user,
        _this = this;
      LoginDirectController.__super__.constructor.apply(this, arguments);
      if (App.Utils.online()) {
        user = App.Storage.users[0];
        p = App.Connector.login(user);
        p.done(function() {
          App.Delegate.boot();
          return Lungo.Router.section('#activity');
        });
        p.fail(function(xhr) {
          App.Utils.fail(xhr);
          return App.Delegate.reboot();
        });
      } else {
        this.onSuccess();
      }
    }

    return LoginDirectController;

  })(Monocle.Controller);

  App.LoginFormController = (function(_super) {
    __extends(LoginFormController, _super);

    LoginFormController.prototype.elements = {
      "#username": "username",
      "#password": "password"
    };

    LoginFormController.prototype.events = {
      "tap #btn-login": "onLogin"
    };

    function LoginFormController() {
      var v;
      LoginFormController.__super__.constructor.apply(this, arguments);
      Lungo.Router.section("login-form");
      v = "username";
      console.log(this[v]);
    }

    LoginFormController.prototype.onLogin = function(event) {
      var p, user,
        _this = this;
      if (event) {
        event.preventDefault();
      }
      user = {
        username: this.username.val(),
        password: this.password.val()
      };
      if (App.Utils.online()) {
        p = App.Connector.login(user);
        p.done(function() {
          App.Delegate.boot();
          return Lungo.Router.section("activity");
        });
        return p.fail(App.Utils.fail);
      } else {
        return App.Utils.showError(App.Messages.InternetRequired);
      }
    };

    return LoginFormController;

  })(Monocle.Controller);

  App.LoginListController = (function(_super) {
    __extends(LoginListController, _super);

    LoginListController.prototype.events = {
      "tap li": "onLogin"
    };

    function LoginListController() {
      LoginListController.__super__.constructor.apply(this, arguments);
      Lungo.Router.section('#login-list');
    }

    LoginListController.prototype.onLogin = function(event) {
      var p;
      if (event) {
        event.preventDefault();
      }
      console.log(this.index());
      if (App.Utils.online()) {
        p = App.Connector.login(data);
        p.done(function() {
          return App.Delegate.boot();
        });
        return p.fail(App.Utils.fail);
      } else {
        return this.onSuccess();
      }
    };

    return LoginListController;

  })(Monocle.Controller);

  App.SignupController = (function(_super) {
    __extends(SignupController, _super);

    SignupController.prototype.elements = {
      "#signup-name": "displayName",
      "#signup-birthdate": "birthday",
      "#signup-gender": "gender",
      "#signup-country": "country",
      "#signup-city": "city",
      "#signup-bio": "bio",
      "#signup-username": "username",
      "#signup-password": "password"
    };

    SignupController.prototype.events = {
      "tap .btn-signup": "onSignup"
    };

    function SignupController() {
      SignupController.__super__.constructor.apply(this, arguments);
    }

    SignupController.prototype.checkData = function() {
      var data, k, v, _ref11;
      data = {};
      data.picture = "je";
      data["public"] = true;
      data.likes = [];
      _ref11 = this.elements;
      for (k in _ref11) {
        v = _ref11[k];
        data[v] = this[v].val();
      }
      console.log(data);
      return data;
    };

    SignupController.prototype.onSignup = function(event) {
      var data, p,
        _this = this;
      if (event) {
        event.preventDefault();
      }
      data = this.checkData();
      console.log("onSignup");
      console.log(data);
      p = App.Connector.signup(data);
      p.done(function(data) {
        console.log(data);
        App.Delegate.boot();
        return App.Utils.showSuccess(App.Messages.UserCreated, function() {
          return Lungo.Router.section('#activity');
        });
      });
      return p.fail(App.Utils.fail);
    };

    return SignupController;

  })(Monocle.Controller);

  Delegate = (function() {
    function Delegate() {
      var _this = this;
      Lungo.ready(function() {
        var users;
        users = App.Storage.users;
        if (!users || users.length === 0) {
          return _this.showLoginForm();
        } else if (users.length === 1) {
          return _this.showLoginDirect();
        } else if (users.length > 1) {
          return _this.showLoginList();
        }
      });
    }

    Delegate.prototype.reboot = function() {
      var users;
      users = App.Storage.users;
      if (users.length > 1) {
        return this.showLoginList();
      } else {
        return this.showLoginForm();
      }
    };

    Delegate.prototype.boot = function() {
      new App.NavController("aside#nav");
      new App.ActivityController("section#activity");
      new App.PartiesController("section#parties");
      new App.SitesController("section#sites");
      new App.MapController("section#map");
      new App.UserController("section#profile");
      new App.FriendsController("section#friends");
      new App.SettingsController("section#settings");
      new App.HelpController("section#help");
      new App.PartyController("section#party");
      return new App.SiteController("section#site");
    };

    Delegate.prototype.showLoginForm = function() {
      new App.LoginFormController("section#login-form");
      return new App.SignupController("section.signup");
    };

    Delegate.prototype.showLoginDirect = function() {
      return new App.LoginDirectController("section#login-direct");
    };

    Delegate.prototype.showLoginList = function() {
      new App.LoginListController("section#login-list");
      return new App.SignupController("section.signup");
    };

    return Delegate;

  })();

  App.Delegate = new Delegate;

  signupRight = function() {
    return App.Storage.signup({
      username: "albertoblaz@gmail.com",
      password: "albertoblaz123"
    });
  };

  signupWrong = function() {
    return App.Storage.signup({
      username: "albertobqlaz@gmail.com",
      password: "albertoblaz123"
    });
  };

  window.localStorage.clear();

  signupRight();

}).call(this);
