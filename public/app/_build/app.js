// Generated by CoffeeScript 1.6.3
(function() {
  var Auth, _ref, _ref1, _ref10, _ref11, _ref12, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8, _ref9,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  App.Exceptions = {
    AuthWrongFields: "Auth Fields Error",
    TooMuchUsersStorage: "Too much users on storage"
  };

  App.Utils = {};

  App.AuthStorage = (function() {
    AuthStorage.prototype.KEYS = {
      users: 'users'
    };

    function AuthStorage(users) {
      var data, json;
      this.users = users != null ? users : [];
      json = window.localStorage.getItem(this.KEYS.users);
      data = JSON.parse(json);
      if (data) {
        this.users = data;
      }
      this.signup({
        username: "asd",
        password: "asd123"
      });
      console.log(this.users);
      this;
    }

    AuthStorage.prototype.login = function(user, success, failure) {
      if (this.lookup(user)) {
        return typeof success === "function" ? success(user) : void 0;
      } else {
        return typeof failure === "function" ? failure(user) : void 0;
      }
    };

    AuthStorage.prototype.signup = function(user) {
      var json;
      if (!this.lookup(user)) {
        this.users.push(user);
        json = JSON.stringify(this.users);
        return window.localStorage.setItem(this.KEYS.users, json);
      }
    };

    AuthStorage.prototype.lookup = function(user) {
      var arr;
      arr = this.users.filter(function(u) {
        return user.username === u.username && user.password === u.password;
      });
      if (arr.length > 1) {
        throw App.Exceptions.TooMuchUsersStorage;
      }
      return arr[0];
    };

    return AuthStorage;

  })();

  App.AuthRemote = (function() {
    function AuthRemote() {}

    AuthRemote.prototype.URIS = {
      login: "/users/login",
      logout: "/users/logout",
      signup: "/users/signup"
    };

    AuthRemote.prototype.login = function(user, success, failure) {
      return this.post(this.URIS.login, user, success, failure);
    };

    AuthRemote.prototype.logout = function(user) {
      return this.post(this.URIS.logout);
    };

    AuthRemote.prototype.signup = function(user, success, failure) {
      return this.post(this.URIS.signup, user, success, failure);
    };

    AuthRemote.prototype.post = function(uri, user, success, failure) {
      var onFail, onSucc, p;
      console.log(uri, user);
      onSucc = function(data) {
        console.log("Callback normal", data);
        if (data) {
          return typeof success === "function" ? success(data) : void 0;
        } else {
          return typeof failure === "function" ? failure(data) : void 0;
        }
      };
      onFail = function(err) {
        console.log("Callback de error", err);
        return typeof failure === "function" ? failure(err) : void 0;
      };
      p = $.post(uri, user);
      p.done(onSucc);
      return p.fail(onFail);
    };

    return AuthRemote;

  })();

  Auth = (function() {
    function Auth() {}

    Auth.prototype.storage = new App.AuthStorage;

    Auth.prototype.remote = new App.AuthRemote;

    Auth.prototype.login = function(data, success, failure) {
      var fail,
        _this = this;
      if (!this.check(data)) {
        return false;
      }
      fail = function() {
        return _this.remote.login(data, success, failure);
      };
      return this.storage.login(data, success, fail);
    };

    Auth.prototype.signup = function(data) {
      var ok, ok2;
      if (!this.check(data)) {
        return false;
      }
      ok = this.storage.signup(data);
      ok2 = this.remote.signup(data);
      return ok && ok2;
    };

    Auth.prototype.check = function(data) {
      var valid;
      valid = data.username !== "" && data.password !== "";
      if (!valid) {
        throw App.Exceptions.AuthWrongFields;
      } else {
        data.password = this.encrypt(data.password);
      }
      return valid;
    };

    Auth.prototype.encrypt = function(pass) {
      return pass += "123";
    };

    return Auth;

  })();

  App.Auth = new Auth;

  App.Activity = (function(_super) {
    __extends(Activity, _super);

    function Activity() {
      _ref = Activity.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    Activity.fields("id", "timestamp", "agent", "from", "type", "action");

    Activity.prototype.validate = function() {};

    return Activity;

  })(Monocle.Model);

  App.Site = (function(_super) {
    __extends(Site, _super);

    function Site() {
      _ref1 = Site.__super__.constructor.apply(this, arguments);
      return _ref1;
    }

    Site.fields("id", "name", "description", "city", "address", "picture", "style", "users", "events", "owner", "loving", "recommended");

    Site.prototype.validate = function() {
      if (!this.id) {
        "id is required";
      }
      if (!this.name) {
        return "name is required";
      }
    };

    Site.prototype.toggleLove = function(user) {
      this.loving = !this.loving;
      return this;
    };

    return Site;

  })(Monocle.Model);

  App.User = (function(_super) {
    __extends(User, _super);

    User.fields("id", "username", "password", "displayName", "picture", "gender", "city", "public", "likes", "birthday", "sites", "friends", "events", "bio", "role", "timeline", "activity");

    function User(data) {
      console.log(data);
    }

    User.prototype.validate = function() {
      if (!this.id) {
        "id is required";
      }
      if (!this.username) {
        return "name is required";
      }
    };

    return User;

  })(Monocle.Model);

  App.SiteView = (function(_super) {
    __extends(SiteView, _super);

    function SiteView() {
      _ref2 = SiteView.__super__.constructor.apply(this, arguments);
      return _ref2;
    }

    SiteView.prototype.template_url = "app/templates/SiteView.mustache";

    SiteView.prototype.events = {
      "tap .button": "onLove"
    };

    SiteView.prototype["tap li"] = "onTap";

    return SiteView;

  })(Monocle.View);

  ({
    onTap: function(event) {
      return console.log("onTap");
    },
    onLove: function(event) {
      console.log("onLove");
      this.model.toggleLove();
      return this.remove();
    }
  });

  App.NavController = (function(_super) {
    __extends(NavController, _super);

    function NavController() {
      _ref3 = NavController.__super__.constructor.apply(this, arguments);
      return _ref3;
    }

    NavController.prototype.events = {
      "tap .profile": "onProfile"
    };

    NavController.prototype.onProfile = function(event) {
      return console.log("onProfile");
    };

    return NavController;

  })(Monocle.Controller);

  App.ActivityController = (function(_super) {
    __extends(ActivityController, _super);

    function ActivityController() {
      _ref4 = ActivityController.__super__.constructor.apply(this, arguments);
      return _ref4;
    }

    ActivityController.prototype.elements = {
      ".btn-filter": "buttons",
      "#activity-list": "list"
    };

    ActivityController.prototype.events = {
      "tap .btn-filter": "onTap"
    };

    ActivityController.prototype.onTap = function(event) {
      var action, b, elems, id, target;
      target = event.currentTarget;
      b = $$(target);
      b.toggleClass('secondary');
      id = target.id.slice(4);
      switch (id) {
        case "party":
          b.toggleClass('cancel');
          break;
        case "site":
          b.toggleClass('yellow');
          break;
        case "friend":
          b.toggleClass('accept');
      }
      action = b.hasClass('secondary') ? 'hide' : 'show';
      elems = this.list.find("." + id);
      return elems[action]();
    };

    return ActivityController;

  })(Monocle.Controller);

  App.PartiesController = (function(_super) {
    __extends(PartiesController, _super);

    function PartiesController() {
      _ref5 = PartiesController.__super__.constructor.apply(this, arguments);
      return _ref5;
    }

    return PartiesController;

  })(Monocle.Controller);

  App.SitesController = (function(_super) {
    __extends(SitesController, _super);

    SitesController.prototype.elements = {
      "#sitesfav ul": "fav",
      "#sitesrec ul": "rec"
    };

    SitesController.prototype.events = {
      "click a[data-action=search]": "onSearch"
    };

    function SitesController() {
      this.bindSiteError = __bind(this.bindSiteError, this);
      this.bindSiteDelete = __bind(this.bindSiteDelete, this);
      this.bindSiteChange = __bind(this.bindSiteChange, this);
      this.onSearch = __bind(this.onSearch, this);
      var p;
      SitesController.__super__.constructor.apply(this, arguments);
      App.Site.bind("change", this.bindSiteChange);
      App.Site.bind("delete", this.bindSiteDelete);
      App.Site.bind("error", this.bindSiteError);
      p = $.get("/sites/");
      p.done(function(sites) {
        var s, _i, _len, _results;
        _results = [];
        for (_i = 0, _len = sites.length; _i < _len; _i++) {
          s = sites[_i];
          _results.push(App.Site.create(s));
        }
        return _results;
      });
      p.fail(function(err) {
        return console.error("Err: ", err);
      });
    }

    SitesController.prototype.onSearch = function(event) {
      return console.log("Searching");
    };

    SitesController.prototype.bindSiteChange = function(site) {
      var view;
      console.log("You've change " + site.name + "!");
      view = new App.SiteView({
        model: site
      });
      if (site.loving) {
        view.container = this.fav;
        return view.append(site);
      } else if (site.recommended) {
        view.container = this.rec;
        return view.append(site);
      }
    };

    SitesController.prototype.bindSiteDelete = function(site) {
      return console.log("You've deleted " + site.name + "!");
    };

    SitesController.prototype.bindSiteError = function(site) {
      return console.log("Site Error spotted, " + site + "!");
    };

    SitesController.prototype.viewProfile = function(params) {
      return console.log("View the profile of the site: " + params.id);
    };

    return SitesController;

  })(Monocle.Controller);

  App.MapController = (function(_super) {
    __extends(MapController, _super);

    function MapController() {
      _ref6 = MapController.__super__.constructor.apply(this, arguments);
      return _ref6;
    }

    MapController.prototype.notified = false;

    MapController.prototype.events = {
      "load #map": "onLoad"
    };

    MapController.prototype.onLoad = function(event) {
      if (!this.notified) {
        return Lungo.Notification.confirm({
          icon: "pushpin",
          title: "¿Find the nearest sites?",
          description: "Map lets you know what are the closest places at your current position. Do you want to find new sites when entering in this window? (You could change this on settings)",
          accept: {
            icon: 'check',
            label: 'Accept and Find',
            callback: this.onAccept
          },
          cancel: {
            icon: "multiply",
            label: "Don't allow",
            callback: this.onCancel
          }
        });
      }
    };

    MapController.prototype.onAccept = function() {
      var notif;
      Lungo.Notification.hide();
      notif = function() {
        Lungo.Notification.show();
        return setTimeout(function() {
          return Lungo.Notification.hide();
        }, 3000);
      };
      setTimeout(notif, 300);
      return this.notified = true;
    };

    MapController.prototype.onCancel = function() {
      return this.notified = true;
    };

    return MapController;

  })(Monocle.Controller);

  App.UserController = (function(_super) {
    __extends(UserController, _super);

    UserController.prototype.elements = {
      ".title": "title",
      ".picture": "picture",
      ".music": "music",
      ".ambient": "ambient",
      ".age": "age",
      ".price": "price",
      ".bio": "bio"
    };

    UserController.prototype.events = {
      "tap .taste": "onTapTaste"
    };

    function UserController() {
      var _this = this;
      this.downloadMe();
      $$('#profile').on("load", function(event) {
        return _this.onLoad(event);
      });
    }

    UserController.prototype.download = function(id) {};

    UserController.prototype.downloadMe = function() {
      var p,
        _this = this;
      p = $.get("/users/me");
      p.done(function(data) {
        App.Me = new App.User(data);
        App.Me.save();
        return _this.render(App.Me);
      });
      return p.fail(function(err) {
        console.log(err);
        throw "Not user";
      });
    };

    UserController.prototype.onLoad = function(event) {
      console.log("onLoad!!", event);
      if (event.srcElement.search("#profile" === !-1)) {
        return this.render(App.Me);
      } else {
        return this.render(App.CurrentUser);
      }
    };

    UserController.prototype.onTapTaste = function(event) {
      return console.log(event);
    };

    UserController.prototype.render = function(user) {
      console.log(user);
      this.title = user.displayName;
      this.picture = user.picture;
      this.bio = user.bio;
      return this.age = user.birthday;
    };

    return UserController;

  })(Monocle.Controller);

  App.FriendsController = (function(_super) {
    __extends(FriendsController, _super);

    function FriendsController() {
      _ref7 = FriendsController.__super__.constructor.apply(this, arguments);
      return _ref7;
    }

    return FriendsController;

  })(Monocle.Controller);

  App.SettingsController = (function(_super) {
    __extends(SettingsController, _super);

    function SettingsController() {
      _ref8 = SettingsController.__super__.constructor.apply(this, arguments);
      return _ref8;
    }

    return SettingsController;

  })(Monocle.Controller);

  App.HelpController = (function(_super) {
    __extends(HelpController, _super);

    function HelpController() {
      _ref9 = HelpController.__super__.constructor.apply(this, arguments);
      return _ref9;
    }

    HelpController.prototype.elements = {
      "#query": "query"
    };

    HelpController.prototype.events = {
      "tap #send-question": "onTap"
    };

    HelpController.prototype.onTap = function() {
      var text;
      text = this.query.val();
      if (text) {
        return this.sendQuestion(text);
      }
    };

    HelpController.prototype.sendQuestion = function(text) {
      var res;
      res = false;
      console.log(text);
      if (res) {
        return Lungo.Notification.success("Question sent!", "You will receive a response in the activity view", "check", 3, function() {
          return {};
        });
      }
    };

    return HelpController;

  })(Monocle.Controller);

  App.PartyController = (function(_super) {
    __extends(PartyController, _super);

    function PartyController() {
      _ref10 = PartyController.__super__.constructor.apply(this, arguments);
      return _ref10;
    }

    return PartyController;

  })(Monocle.Controller);

  App.SiteController = (function(_super) {
    __extends(SiteController, _super);

    SiteController.prototype.elements = {
      ".title": "title",
      ".picture": "picture"
    };

    SiteController.prototype.events = {
      "tap .love": "onLove"
    };

    function SiteController() {}

    SiteController.prototype.onLove = function() {};

    SiteController.prototype.render = function(site) {};

    SiteController.prototype.download = function(id) {
      var data;
      data = {};
      App.Site.create(data);
      return this.render;
    };

    return SiteController;

  })(Monocle.Controller);

  App.LoginController = (function(_super) {
    __extends(LoginController, _super);

    function LoginController() {
      _ref11 = LoginController.__super__.constructor.apply(this, arguments);
      return _ref11;
    }

    LoginController.prototype.elements = {
      "#login-name": "name",
      "#login-password": "pass"
    };

    LoginController.prototype.events = {
      "tap .btn-login": "onLogin"
    };

    LoginController.prototype.onLogin = function(event) {
      var data;
      event.preventDefault();
      data = {
        username: this.name.val() || "",
        password: this.pass.val() || ""
      };
      return App.Auth.login(data, this.onSuccess, this.onError);
    };

    LoginController.prototype.onSuccess = function(remoteData) {
      Lungo.Router.section('#activity');
      new App.NavController("aside#nav");
      new App.ActivityController("section#activity");
      new App.PartiesController("section#parties");
      new App.SitesController("section#sites");
      new App.MapController("section#map");
      new App.UserController("section#profile");
      new App.FriendsController("section#friends");
      new App.SettingsController("section#settings");
      new App.HelpController("section#help");
      new App.PartyController("section#party");
      return new App.SiteController("section#site");
    };

    LoginController.prototype.onError = function(remoteData) {
      return Lungo.Notification.error("Error", "Login failed :(", "cancel", 2);
    };

    return LoginController;

  })(Monocle.Controller);

  App.SignupController = (function(_super) {
    __extends(SignupController, _super);

    function SignupController() {
      _ref12 = SignupController.__super__.constructor.apply(this, arguments);
      return _ref12;
    }

    SignupController.prototype.elements = {
      "#signup-name": "name",
      "#signup-password": "pass",
      "#signup-realname": "realname",
      "#signup-gender": "gender"
    };

    SignupController.prototype.events = {
      "tap .btn-signup": "onSignup"
    };

    SignupController.prototype.checkData = function() {
      var data, e, str, _i, _len, _ref13;
      data = {};
      _ref13 = ['name', 'pass', 'realname', 'gender'];
      for (_i = 0, _len = _ref13.length; _i < _len; _i++) {
        e = _ref13[_i];
        str = this[e].val();
        if (!str) {
          this.showError();
          break;
        } else {
          data[e] = str;
        }
      }
      return data;
    };

    SignupController.prototype.onSignup = function(event) {
      var data, res;
      event.preventDefault();
      data = this.checkData();
      res = App.StorageManager.signup(data);
      if (!res) {
        return this.showError();
      } else {
        return this.showSuccess();
      }
    };

    SignupController.prototype.showSuccess = function() {
      return Lungo.Notification.success("Success", "User signed up successfully!", "check", 2, function() {
        return Lungo.Router.section('#activity');
      });
    };

    SignupController.prototype.showError = function() {
      return Lungo.Notification.error("Error", "Signup failed :(", "cancel", 2);
    };

    return SignupController;

  })(Monocle.Controller);

  Lungo.ready(function() {
    console.log("Ready!!");
    "App.Auth.signup\n    username: \"asd\"\n    password: \"asd\"";
    new App.LoginController("section#login");
    return new App.SignupController("section#signup");
  });

}).call(this);
