// Generated by CoffeeScript 1.6.3
(function() {
  var Connector, Delegate, Storage, signupRight, signupWrong, _ref, _ref1, _ref10, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8, _ref9,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  App.NavController = (function(_super) {
    __extends(NavController, _super);

    function NavController() {
      _ref = NavController.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    NavController.prototype.events = {
      "tap .profile": "onProfile"
    };

    NavController.prototype.onProfile = function(event) {
      return Lungo.Router.section("profile");
    };

    return NavController;

  })(Monocle.Controller);

  App.ActivityController = (function(_super) {
    __extends(ActivityController, _super);

    function ActivityController() {
      _ref1 = ActivityController.__super__.constructor.apply(this, arguments);
      return _ref1;
    }

    ActivityController.prototype.elements = {
      ".btn-filter": "buttons",
      "#activity-list": "list"
    };

    ActivityController.prototype.events = {
      "tap .btn-filter": "onTap"
    };

    ActivityController.prototype.onTap = function(event) {
      var action, b, elems, id, target;
      target = event.currentTarget;
      b = $$(target);
      b.toggleClass('secondary');
      id = target.id.slice(4);
      switch (id) {
        case "party":
          b.toggleClass('cancel');
          break;
        case "site":
          b.toggleClass('yellow');
          break;
        case "friend":
          b.toggleClass('accept');
      }
      action = b.hasClass('secondary') ? 'hide' : 'show';
      elems = this.list.find("." + id);
      return elems[action]();
    };

    return ActivityController;

  })(Monocle.Controller);

  App.PartiesController = (function(_super) {
    __extends(PartiesController, _super);

    function PartiesController() {
      _ref2 = PartiesController.__super__.constructor.apply(this, arguments);
      return _ref2;
    }

    return PartiesController;

  })(Monocle.Controller);

  App.Messages = {
    UserCreated: "User created successfully!",
    SignupFailed: "A new user can not be created",
    AuthenticationFailed: "Username or password is incorrect",
    InternetRequired: "An Internet connection is required",
    LoginFieldsRequired: "Please, fill all the fields to login",
    SignupFieldsRequired: "Please, fill all the fields to create a new account",
    TooMuchUsersStorage: "Too much users on storage"
  };

  Array.prototype.contains = function(elem) {
    return this.indexOf(elem) === !-1;
  };

  App.Utils = {};

  App.Utils.showSuccess = function(message, callback) {
    return Lungo.Notification.success("Success", message, "check", 2, typeof callback === "function" ? callback() : void 0);
  };

  App.Utils.showError = function(message) {
    return Lungo.Notification.error("Error", message, "cancel", 2);
  };

  App.Utils.fail = function(xhr) {
    var json, k, v, _ref3;
    console.log("fail", xhr);
    json = JSON.parse(xhr.responseText);
    if (typeof json === "object") {
      if (json.errors) {
        _ref3 = json.errors;
        for (k in _ref3) {
          v = _ref3[k];
          App.Utils.showError("" + k + " " + v);
        }
      }
      if (json.message) {
        return App.Utils.showError(json.message);
      }
    } else if (typeof json === "string") {
      return App.Utils.showError("" + json);
    }
  };

  App.Utils.online = function() {
    return true;
  };

  App.User = (function(_super) {
    __extends(User, _super);

    function User() {
      _ref3 = User.__super__.constructor.apply(this, arguments);
      return _ref3;
    }

    User.fields("id", "username", "password", "displayName", "picture", "gender", "city", "public", "likes", "birthday", "sites", "friends", "events", "bio", "role", "timeline", "activity", "music", "ambient", "maxprice", "age");

    User.prototype.validate = function() {
      if (!this.id) {
        return "id is required";
      }
    };

    User.prototype.me = function() {
      return this.id === App.Me.id;
    };

    User.prototype["delete"] = function() {};

    return User;

  })(Monocle.Model);

  Connector = (function() {
    function Connector() {
      this.downloadMe = __bind(this.downloadMe, this);
    }

    Connector.prototype.URIS = {
      me: "/users/me",
      login: "/users/login",
      logout: "/users/logout",
      signup: "/users"
    };

    Connector.prototype.downloadMe = function() {
      var p,
        _this = this;
      p = $.get(this.URIS.me);
      p.done(function(me) {
        var fid, q, user, _i, _len, _ref4, _results;
        console.log(me);
        user = App.User.create(me);
        App.Me = user;
        _ref4 = App.Me.friends;
        _results = [];
        for (_i = 0, _len = _ref4.length; _i < _len; _i++) {
          fid = _ref4[_i];
          q = $.get("/users/" + fid);
          _results.push(q.done(function(data) {
            console.log(data);
            App.User.create(data);
            return App.Delegate.boot();
          }));
        }
        return _results;
      });
      return p.fail(App.Utils.fail);
    };

    Connector.prototype.login = function(user) {
      var p;
      p = this.auth(this.URIS.login, user);
      p.done(this.downloadMe);
      return p.fail(App.Utils.fail);
    };

    Connector.prototype.logout = function(user) {
      return this.auth(this.URIS.logout);
    };

    Connector.prototype.signup = function(user) {
      return this.auth(this.URIS.signup, user);
    };

    Connector.prototype.auth = function(uri, data) {
      var p;
      console.log(uri, data);
      $.ajaxSetup({
        "contentType": "application/json"
      });
      return p = $.post(uri, JSON.stringify(data));
    };

    return Connector;

  })();

  App.Connector = new Connector;

  App.Comment = (function(_super) {
    __extends(Comment, _super);

    function Comment() {
      _ref4 = Comment.__super__.constructor.apply(this, arguments);
      return _ref4;
    }

    Comment.fields("id", "comment", "commenter", "commented", "timestamp");

    Comment.prototype.validate = function() {
      if (!this.id) {
        "id is required";
      }
      if (!this.commenter) {
        "commenter is required";
      }
      if (!this.comment) {
        "comment is required";
      }
      if (!(this.comment.length <= 140)) {
        return "too much characters";
      }
    };

    return Comment;

  })(Monocle.Model);

  App.Site = (function(_super) {
    __extends(Site, _super);

    function Site() {
      _ref5 = Site.__super__.constructor.apply(this, arguments);
      return _ref5;
    }

    Site.fields("id", "name", "description", "city", "address", "picture", "style", "users", "events", "owner", "loved", "recommended", "comments");

    Site.prototype.validate = function() {
      if (!this.id) {
        "id is required";
      }
      if (!this.name) {
        return "name is required";
      }
    };

    Site.prototype.love = function(user) {
      this.updateAttributes({
        loved: !this.loved
      });
      return this;
    };

    Site.prototype.comment = function(data) {
      var com;
      com = App.Comment.create(data);
      this.comments.push(com);
      this.updateAttributes({
        comments: this.comments
      });
      return this;
    };

    Site.prototype.recommend = function() {
      var fid, _i, _len, _ref6;
      _ref6 = App.Me.friends;
      for (_i = 0, _len = _ref6.length; _i < _len; _i++) {
        fid = _ref6[_i];
        this.recommended.push(fid);
      }
      this.updateAttributes({
        recommended: this.recommended
      });
      return this;
    };

    return Site;

  })(Monocle.Model);

  App.SiteView = (function(_super) {
    __extends(SiteView, _super);

    SiteView.prototype.template_url = "app/templates/SiteTemplate.mustache";

    SiteView.prototype.events = {
      "tap .button": "onLove",
      "tap li": "onTap"
    };

    function SiteView() {
      this.removeSiteView = __bind(this.removeSiteView, this);
      SiteView.__super__.constructor.apply(this, arguments);
      App.Site.bind("removeSiteView", this.removeSiteView);
    }

    SiteView.prototype.onTap = function(event) {
      return Monocle.Route.navigate("/sites/" + this.model.id);
    };

    SiteView.prototype.onLove = function(event) {
      event.preventDefault();
      event.stopPropagation();
      this.model.love();
      return this.refresh();
    };

    SiteView.prototype.removeSiteView = function(model) {
      if (this.model.equal(model)) {
        return this.el.remove();
      }
    };

    return SiteView;

  })(Monocle.View);

  App.SitesController = (function(_super) {
    __extends(SitesController, _super);

    SitesController.prototype.elements = {
      "#sitesfav ul": "fav",
      "#sitesrec ul": "rec"
    };

    SitesController.prototype.events = {
      "tap #search": "onSearch",
      "load #sites": "onLoad"
    };

    SitesController.prototype.pendingSites = [];

    function SitesController() {
      this.bindSiteError = __bind(this.bindSiteError, this);
      this.bindSiteDelete = __bind(this.bindSiteDelete, this);
      this.bindChange = __bind(this.bindChange, this);
      this.bindCreate = __bind(this.bindCreate, this);
      var p,
        _this = this;
      SitesController.__super__.constructor.apply(this, arguments);
      App.Site.bind("create", this.bindCreate);
      App.Site.bind("error", this.bindSiteError);
      App.Site.bind("delete", this.bindSiteDelete);
      p = $.getJSON("/sites/");
      p.done(function(sites) {
        var s, site, _i, _len;
        console.log(sites);
        for (_i = 0, _len = sites.length; _i < _len; _i++) {
          s = sites[_i];
          s.comments = [];
          s.recommended = [];
          site = App.Site.create(s);
        }
        site.comment({
          id: "1",
          comment: "Comentario de prueba",
          commenter: App.Me,
          commented: site
        });
        return App.Site.bind("change", _this.bindChange);
      });
      p.fail(App.Utils.fail);
    }

    SitesController.prototype.onLoad = function(event) {
      var site, _i, _len, _ref6;
      _ref6 = this.pendingSites;
      for (_i = 0, _len = _ref6.length; _i < _len; _i++) {
        site = _ref6[_i];
        site.trigger("removeSiteView");
        this.bindCreate(site);
      }
      return this.pendingSites = [];
    };

    SitesController.prototype.onSearch = function(event) {
      return console.log("Searching");
    };

    SitesController.prototype.bindCreate = function(site) {
      var view;
      console.log("You've created " + site.name + "!");
      view = new App.SiteView({
        model: site
      });
      if (site.loved) {
        view.container = this.fav;
        return view.append(site);
      } else if (site.recommended) {
        view.container = this.rec;
        return view.append(site);
      }
    };

    SitesController.prototype.bindChange = function(site) {
      console.log("You've changed " + site.name + "!");
      if (!this.pendingSites.contains(site)) {
        return this.pendingSites.push(site);
      }
    };

    SitesController.prototype.bindSiteDelete = function(site) {
      App.Utils.showError("Deleting the site " + site.name);
      throw "You've deleted " + site.name + "!, " + site;
    };

    SitesController.prototype.bindSiteError = function(site) {
      return App.Utils.showError("Site error spotted, " + site.name + "!");
    };

    return SitesController;

  })(Monocle.Controller);

  App.MapController = (function(_super) {
    __extends(MapController, _super);

    function MapController() {
      _ref6 = MapController.__super__.constructor.apply(this, arguments);
      return _ref6;
    }

    MapController.prototype.notified = false;

    MapController.prototype.events = {
      "load #map": "onLoad"
    };

    MapController.prototype.onLoad = function(event) {
      if (!this.notified) {
        return Lungo.Notification.confirm({
          icon: "pushpin",
          title: "¿Find the nearest sites?",
          description: "Map lets you know what are the closest places at your current position. Do you want to find new sites when entering in this window? (You could change this on settings)",
          accept: {
            icon: 'check',
            label: 'Accept and Find',
            callback: this.onAccept
          },
          cancel: {
            icon: "multiply",
            label: "Don't allow",
            callback: this.onCancel
          }
        });
      }
    };

    MapController.prototype.onAccept = function() {
      var notif;
      Lungo.Notification.hide();
      notif = function() {
        Lungo.Notification.show();
        return setTimeout(function() {
          return Lungo.Notification.hide();
        }, 3000);
      };
      setTimeout(notif, 300);
      return this.notified = true;
    };

    MapController.prototype.onCancel = function() {
      return this.notified = true;
    };

    return MapController;

  })(Monocle.Controller);

  App.UserView = (function(_super) {
    __extends(UserView, _super);

    UserView.prototype.template_url = "app/templates/UserTemplate.mustache";

    UserView.prototype.events = {
      "tap .button": "onFollow",
      "tap li": "onTap"
    };

    function UserView() {
      UserView.__super__.constructor.apply(this, arguments);
    }

    UserView.prototype.onTap = function(event) {
      return Monocle.Route.navigate("/users/" + this.model);
    };

    UserView.prototype.onFollow = function(event) {
      event.preventDefault();
      event.stopPropagation();
      this.model.follow();
      return this.refresh();
    };

    return UserView;

  })(Monocle.View);

  App.FriendsController = (function(_super) {
    __extends(FriendsController, _super);

    FriendsController.prototype.elements = {
      "#friends": "friends"
    };

    FriendsController.prototype.events = {
      "tap #btn-search": "onSearch"
    };

    function FriendsController() {
      FriendsController.__super__.constructor.apply(this, arguments);
      this.render(App.Me);
    }

    FriendsController.prototype.onSearch = function(event) {
      return console.log("search", event);
    };

    FriendsController.prototype.render = function(user) {
      var fid, friend, view, _i, _len, _ref7;
      if (user.friends) {
        _ref7 = user.friends;
        for (_i = 0, _len = _ref7.length; _i < _len; _i++) {
          fid = _ref7[_i];
          friend = App.User.findBy("id", fid);
          view = new App.UserView({
            model: friend
          });
          view.container = this.friends;
          view.append(friend);
        }
      }
      return this;
    };

    return FriendsController;

  })(Monocle.Controller);

  App.SettingsController = (function(_super) {
    __extends(SettingsController, _super);

    function SettingsController() {
      _ref7 = SettingsController.__super__.constructor.apply(this, arguments);
      return _ref7;
    }

    return SettingsController;

  })(Monocle.Controller);

  App.HelpController = (function(_super) {
    __extends(HelpController, _super);

    function HelpController() {
      _ref8 = HelpController.__super__.constructor.apply(this, arguments);
      return _ref8;
    }

    HelpController.prototype.elements = {
      "#query": "query"
    };

    HelpController.prototype.events = {
      "tap #send-question": "onTap"
    };

    HelpController.prototype.onTap = function() {
      var text;
      text = this.query.val();
      if (text) {
        return this.sendQuestion(text);
      }
    };

    HelpController.prototype.sendQuestion = function(text) {
      var res;
      res = false;
      console.log(text);
      if (res) {
        return Lungo.Notification.success("Question sent!", "You will receive a response in the activity view", "check", 3);
      }
    };

    return HelpController;

  })(Monocle.Controller);

  App.UserProfileController = (function(_super) {
    __extends(UserProfileController, _super);

    UserProfileController.prototype.elements = {
      "#displayName": "displayName",
      "#picture": "picture",
      "#music": "music",
      "#ambient": "ambient",
      "#age": "age",
      "#maxprice": "maxprice",
      "#bio": "bio",
      "#timeline": "timeline",
      "#friends": "friends"
    };

    UserProfileController.prototype.events = {
      "tap #btn-edit": "onEdit",
      "tap .taste": "onTapTaste"
    };

    function UserProfileController() {
      UserProfileController.__super__.constructor.apply(this, arguments);
      this.render(App.Me);
    }

    UserProfileController.prototype.onEdit = function(event) {
      return console.log("edit", event);
    };

    UserProfileController.prototype.onTapTaste = function(event) {
      return console.log("tapTaste", event);
    };

    UserProfileController.prototype.render = function(user) {
      this.renderInfo(user);
      this.renderActivty(user);
      this.renderSites(user);
      return this.renderFriends(user);
    };

    UserProfileController.prototype.renderInfo = function(user) {
      var prop, _i, _len, _ref9;
      this.picture[0].src = user.picture;
      _ref9 = ["displayName", "music", "ambient", "age", "maxprice", "bio"];
      for (_i = 0, _len = _ref9.length; _i < _len; _i++) {
        prop = _ref9[_i];
        this[prop].text(user[prop]);
      }
      return this;
    };

    UserProfileController.prototype.renderActivty = function(user) {
      return this;
    };

    UserProfileController.prototype.renderSites = function(user) {
      return this;
    };

    UserProfileController.prototype.renderFriends = function(user) {
      var fid, friend, view, _i, _len, _ref9;
      if (user.friends) {
        _ref9 = user.friends;
        for (_i = 0, _len = _ref9.length; _i < _len; _i++) {
          fid = _ref9[_i];
          friend = App.User.findBy("id", fid);
          console.log(friend);
          view = new App.UserView({
            model: friend
          });
          view.container = this.friends;
          view.append(friend);
        }
      }
      return this;
    };

    return UserProfileController;

  })(Monocle.Controller);

  App.UserFriendController = (function(_super) {
    __extends(UserFriendController, _super);

    UserFriendController.prototype.elements = {
      "#displayName": "displayName",
      "#picture": "picture",
      "#music": "music",
      "#ambient": "ambient",
      "#age": "age",
      "#maxprice": "maxprice",
      "#bio": "bio",
      "#timeline": "timeline",
      "#friends-shared": "shared",
      "#friends-rest": "rest"
    };

    UserFriendController.prototype.events = {
      "tap #btn-follow": "onFollow",
      "tap .taste": "onTapTaste"
    };

    UserFriendController.prototype.currentUser = null;

    function UserFriendController() {
      this.loadProfile = __bind(this.loadProfile, this);
      UserFriendController.__super__.constructor.apply(this, arguments);
      this.routes({
        "/users/:id": this.loadProfile
      });
      Monocle.Route.listen();
    }

    UserFriendController.prototype.onFollow = function(event) {};

    UserFriendController.prototype.loadProfile = function(params) {
      var user;
      user = App.User.findBy("id", params.id);
      if (!user) {
        user = this.download(params.id);
      }
      this.render(user);
      this.currentUser = user;
      if (!user.me()) {
        return Lungo.Router.section("profile-friend");
      } else {
        return Lungo.Router.section("profile");
      }
    };

    UserFriendController.prototype.render = function(user) {
      this.renderInfo(user);
      this.renderActivty(user);
      this.renderSites(user);
      return this.renderFriends(user);
    };

    UserFriendController.prototype.renderInfo = function(user) {
      var prop, _i, _len, _ref9;
      this.picture[0].src = user.picture;
      _ref9 = ["displayName", "music", "ambient", "age", "maxprice", "bio"];
      for (_i = 0, _len = _ref9.length; _i < _len; _i++) {
        prop = _ref9[_i];
        this[prop].text(user[prop]);
      }
      return this;
    };

    UserFriendController.prototype.renderActivty = function(user) {
      return this;
    };

    UserFriendController.prototype.renderSites = function(user) {
      return this;
    };

    UserFriendController.prototype.renderFriends = function(user) {
      var fid, friend, method, view, _i, _len, _ref9;
      this.shared.children(".friend").remove();
      this.rest.children(".friend").remove();
      if (user.friends) {
        method = user.me() ? "hide" : "show";
        this.shared.children(".anchor")[method]();
        this.rest.children(".anchor")[method]();
        _ref9 = user.friends;
        for (_i = 0, _len = _ref9.length; _i < _len; _i++) {
          fid = _ref9[_i];
          friend = App.User.findBy("id", fid);
          view = new App.UserView({
            model: friend
          });
          view.container = this.shared;
          view.append(friend);
        }
      }
      return this;
    };

    UserFriendController.prototype.download = function(id) {
      return console.log("download " + id);
    };

    return UserFriendController;

  })(Monocle.Controller);

  App.PartyController = (function(_super) {
    __extends(PartyController, _super);

    function PartyController() {
      _ref9 = PartyController.__super__.constructor.apply(this, arguments);
      return _ref9;
    }

    return PartyController;

  })(Monocle.Controller);

  App.CommentView = (function(_super) {
    __extends(CommentView, _super);

    CommentView.prototype.template_url = "app/templates/CommentTemplate.mustache";

    CommentView.prototype.events = {
      "tap li": "onTap"
    };

    function CommentView() {
      CommentView.__super__.constructor.apply(this, arguments);
    }

    CommentView.prototype.onTap = function(event) {
      console.log("onTap, see profile");
      return Monocle.Route.navigate("/users/" + this.model.id);
    };

    return CommentView;

  })(Monocle.View);

  App.SiteController = (function(_super) {
    __extends(SiteController, _super);

    SiteController.prototype.elements = {
      "#name": "name",
      "#picture": "picture",
      "#music": "music",
      "#ambient": "ambient",
      "#age": "age",
      "#maxprice": "maxprice",
      "#description": "description",
      "#comments": "comments",
      "#btn-love": "love"
    };

    SiteController.prototype.events = {
      "tap #btn-love": "onLove",
      "tap #btn-comment": "onComment",
      "tap #btn-recommend": "onRecommend"
    };

    SiteController.prototype.currentSite = null;

    function SiteController() {
      SiteController.__super__.constructor.apply(this, arguments);
      this.routes({
        "/sites/:id": this.loadProfile
      });
      Monocle.Route.listen();
    }

    SiteController.prototype.onLove = function(event) {
      this.currentSite.love();
      return this.renderLove(this.currentSite);
    };

    SiteController.prototype.onComment = function(event) {};

    SiteController.prototype.onRecommend = function(event) {
      var _this = this;
      return Lungo.Notification.confirm({
        icon: "thumbs-up",
        title: "Recommend",
        description: "Do you want to recommend " + this.currentSite.name + " to your friends?",
        accept: {
          icon: "check",
          label: "Recommend " + this.currentSite.name,
          callback: function() {
            return _this.currentSite.recommend();
          }
        },
        cancel: {
          icon: "multiply",
          label: "Cancel"
        }
      });
    };

    SiteController.prototype.loadProfile = function(params) {
      var site;
      site = App.Site.findBy("id", params.id);
      if (!site) {
        site = this.download(params.id);
      }
      this.render(site);
      this.currentSite = site;
      return Lungo.Router.section("#site");
    };

    SiteController.prototype.render = function(site) {
      this.renderInfo(site);
      this.renderComments(site);
      return this.renderLove(site);
    };

    SiteController.prototype.renderInfo = function(site) {
      this.name.text(site.name);
      return this.picture[0].src = site.picture;
    };

    SiteController.prototype.renderComments = function(site) {
      var c, view, _i, _j, _len, _len1, _ref10, _ref11, _results;
      _ref10 = this.comments.children(".arrow");
      for (_i = 0, _len = _ref10.length; _i < _len; _i++) {
        c = _ref10[_i];
        c.remove();
      }
      _ref11 = site.comments;
      _results = [];
      for (_j = 0, _len1 = _ref11.length; _j < _len1; _j++) {
        c = _ref11[_j];
        view = new App.CommentView({
          model: c
        });
        view.container = this.comments;
        _results.push(view.append(c));
      }
      return _results;
    };

    SiteController.prototype.renderLove = function(site) {
      var icon, label;
      label = this.love.find("abbr");
      icon = this.love.find(".icon");
      if (site.attributes().loved) {
        label.text("Loving");
        return icon.removeClass("heart-full").addClass("heart");
      } else {
        label.text("Love?");
        return icon.removeClass("heart").addClass("heart-full");
      }
    };

    SiteController.prototype.download = function(id) {
      var data;
      console.log("download site " + id);
      data = App.Connector.sites.get(id);
      return App.Site.create(data);
    };

    return SiteController;

  })(Monocle.Controller);

  App.LoginDirectController = (function(_super) {
    __extends(LoginDirectController, _super);

    function LoginDirectController() {
      var p, user,
        _this = this;
      LoginDirectController.__super__.constructor.apply(this, arguments);
      if (App.Utils.online()) {
        user = App.Storage.users[0];
        p = App.Connector.login(user);
        p.done(function() {
          return Lungo.Router.section('#activity');
        });
        p.fail(function() {
          return App.Delegate.reboot();
        });
      }
    }

    return LoginDirectController;

  })(Monocle.Controller);

  App.LoginFormController = (function(_super) {
    __extends(LoginFormController, _super);

    LoginFormController.prototype.elements = {
      "#username": "username",
      "#password": "password"
    };

    LoginFormController.prototype.events = {
      "tap #btn-login": "onLogin"
    };

    function LoginFormController() {
      LoginFormController.__super__.constructor.apply(this, arguments);
      Lungo.Router.section("login-form");
    }

    LoginFormController.prototype.onLogin = function(event) {
      var p, user,
        _this = this;
      if (event) {
        event.preventDefault();
      }
      user = {
        username: this.username.val(),
        password: this.password.val()
      };
      if (App.Utils.online()) {
        p = App.Connector.login(user);
        return p.done(function() {
          return Lungo.Router.section("activity");
        });
      } else {
        return App.Utils.showError(App.Messages.InternetRequired);
      }
    };

    return LoginFormController;

  })(Monocle.Controller);

  App.LoginListController = (function(_super) {
    __extends(LoginListController, _super);

    LoginListController.prototype.events = {
      "tap li": "onLogin"
    };

    function LoginListController() {
      LoginListController.__super__.constructor.apply(this, arguments);
      Lungo.Router.section('#login-list');
    }

    LoginListController.prototype.onLogin = function(event) {
      var p;
      if (event) {
        event.preventDefault();
      }
      console.log(this.index());
      if (App.Utils.online()) {
        p = App.Connector.login(data);
        return p.done(function() {});
      } else {
        return this.onSuccess();
      }
    };

    return LoginListController;

  })(Monocle.Controller);

  App.SignupController = (function(_super) {
    __extends(SignupController, _super);

    SignupController.prototype.elements = {
      "#signup-name": "displayName",
      "#signup-birthdate": "birthdate",
      "#signup-gender": "gender",
      "#signup-country": "country",
      "#signup-city": "city",
      "#signup-bio": "bio",
      "#signup-username": "username",
      "#signup-password": "password"
    };

    SignupController.prototype.events = {
      "tap .btn-signup": "onSignup"
    };

    function SignupController() {
      SignupController.__super__.constructor.apply(this, arguments);
    }

    SignupController.prototype.checkData = function() {
      var data, k, v, _ref10;
      data = {};
      data.picture = "je";
      data["public"] = true;
      data.likes = [];
      _ref10 = this.elements;
      for (k in _ref10) {
        v = _ref10[k];
        data[v] = this[v].val();
      }
      console.log(data);
      return data;
    };

    SignupController.prototype.onSignup = function(event) {
      var data, p,
        _this = this;
      if (event) {
        event.preventDefault();
      }
      data = this.checkData();
      console.log("onSignup");
      console.log(data);
      p = App.Connector.signup(data);
      p.done(function(data) {
        console.log(data);
        return App.Utils.showSuccess(App.Messages.UserCreated, function() {
          var q;
          q = App.Connector.login(data);
          q.done(function() {
            App.Delegate.boot();
            return Lungo.Router.section('#activity');
          });
          return q.fail(function(xhr) {
            Lungo.Router.section('#login-form');
            return App.Utils.fail(xhr);
          });
        });
      });
      return p.fail(App.Utils.fail);
    };

    return SignupController;

  })(Monocle.Controller);

  Storage = (function() {
    Storage.prototype.KEYS = {
      users: 'users'
    };

    function Storage(users) {
      this.users = users != null ? users : [];
      this.retrieve();
    }

    Storage.prototype.retrieve = function() {
      var data, json;
      json = window.localStorage.getItem(this.KEYS.users);
      if (json) {
        data = JSON.parse(json);
      }
      if (data) {
        this.users = data;
      }
      return this;
    };

    Storage.prototype.login = function(user, success, failure) {
      if (this.lookup(user)) {
        return typeof success === "function" ? success(user) : void 0;
      } else {
        return typeof failure === "function" ? failure(user) : void 0;
      }
    };

    Storage.prototype.signup = function(user) {
      var json;
      if (!this.lookup(user)) {
        this.users.push(user);
        json = JSON.stringify(this.users);
        return window.localStorage.setItem(this.KEYS.users, json);
      }
    };

    Storage.prototype.lookup = function(user) {
      var arr;
      arr = this.users.filter(function(u) {
        return user.username === u.username && user.password === u.password;
      });
      if (arr.length > 1) {
        throw App.Messages.TooMuchUsersStorage;
      }
      return arr[0];
    };

    return Storage;

  })();

  App.Storage = new Storage;

  Delegate = (function() {
    var showLoginDirect, showLoginForm, showLoginList;

    function Delegate() {
      var _this = this;
      Lungo.ready(function() {
        var users;
        users = App.Storage.users;
        if (!users || users.length === 0) {
          return showLoginForm();
        } else if (users.length === 1) {
          return showLoginDirect();
        } else if (users.length > 1) {
          return showLoginList();
        }
      });
    }

    Delegate.prototype.boot = function() {
      new App.NavController("aside#nav");
      new App.ActivityController("section#activity");
      new App.PartiesController("section#parties");
      new App.SitesController("section#sites");
      new App.MapController("section#map");
      new App.FriendsController("section#friends");
      new App.SettingsController("section#settings");
      new App.HelpController("section#help");
      new App.UserProfileController("section#profile");
      new App.UserFriendController("section#profile-friend");
      new App.PartyController("section#party");
      new App.SiteController("section#site");
      return this;
    };

    Delegate.prototype.reboot = function() {
      var users;
      users = App.Storage.users;
      if (users.length > 1) {
        return showLoginList();
      } else {
        return showLoginForm();
      }
    };

    showLoginForm = function() {
      new App.LoginFormController("section#login-form");
      return new App.SignupController("section.signup");
    };

    showLoginDirect = function() {
      return new App.LoginDirectController("section#login-direct");
    };

    showLoginList = function() {
      new App.LoginListController("section#login-list");
      return new App.SignupController("section.signup");
    };

    return Delegate;

  })();

  App.Delegate = new Delegate;

  signupRight = function() {
    return App.Storage.signup({
      username: "albertoblaz@gmail.com",
      password: "albertoblaz123"
    });
  };

  signupWrong = function() {
    return App.Storage.signup({
      username: "albertobqlaz@gmail.com",
      password: "albertoblaz123"
    });
  };

  window.localStorage.clear();

  signupRight();

  App.Activity = (function(_super) {
    __extends(Activity, _super);

    function Activity() {
      _ref10 = Activity.__super__.constructor.apply(this, arguments);
      return _ref10;
    }

    Activity.fields("id", "timestamp", "agent", "from", "type", "action");

    Activity.prototype.validate = function() {};

    return Activity;

  })(Monocle.Model);

}).call(this);
